// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.
// Answer: 233168

var sum = 0;

for (var i = 0; i < 1000; i++) {
    if ((i % 3 === 0) || (i % 5 === 0)) {
        sum += i;
    }
}

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
// Answer: 4613732

var num = [];
var j = 0;
var x = 1;
var number;
// Take out if statement to work on console
while ((x + j) < 4000000) {
    number = x + j;
    num.push(number);
    j = x;
    x = number;
}

function isEven(number2) {
    return (number2 % 2 === 0);
}

var evens = num.filter(isEven);

var sum = evens.reduce(function(a, b) {
    return a + b;
})

console.log(sum);






// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?
// Answer: 6857

var factors = [];

for (var x = 2; x < 600851475143; x++) {
    if ((600851475143 % x) === 0) {
        factors.push(x);
    }
}

var primes = [];

function isPrime(number) {
    for(var i = 2; i < number; i++) {
        if ((number % i) === 0) {
            return false;
        }
    }
    primes.push(number);
}

factors.forEach(isPrime);

primes.sort(function (a, b) {
    var result = 0;
    if (a < b) {
        result = -1;
    } else if (a > b) {
        result = 1;
    }
    return result;
});

var maxPrime = primes[primes.length - 1];
console.log(maxPrime);


//comment
